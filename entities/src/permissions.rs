//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, poem_openapi :: Object,
)]
#[sea_orm(table_name = "permissions")]
#[oai(rename = "Permissions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub permission_name: Option<String>,
    pub action_id: String,
    pub resource_id: String,
    pub scope_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::permission_action::Entity",
        from = "Column::ActionId",
        to = "super::permission_action::Column::Action",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PermissionAction,
    #[sea_orm(
        belongs_to = "super::permission_resource::Entity",
        from = "Column::ResourceId",
        to = "super::permission_resource::Column::Resource",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PermissionResource,
    #[sea_orm(
        belongs_to = "super::permission_scope::Entity",
        from = "Column::ScopeId",
        to = "super::permission_scope::Column::Scope",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PermissionScope,
    #[sea_orm(has_many = "super::role_permissions::Entity")]
    RolePermissions,
    #[sea_orm(has_many = "super::user_permissions::Entity")]
    UserPermissions,
}

impl Related<super::permission_action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionAction.def()
    }
}

impl Related<super::permission_resource::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionResource.def()
    }
}

impl Related<super::permission_scope::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionScope.def()
    }
}

impl Related<super::role_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RolePermissions.def()
    }
}

impl Related<super::user_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPermissions.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::role_permissions::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::role_permissions::Relation::Permissions.def().rev())
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_permissions::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_permissions::Relation::Permissions.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::permission_action::Entity")]
    PermissionAction,
    #[sea_orm(entity = "super::permission_resource::Entity")]
    PermissionResource,
    #[sea_orm(entity = "super::permission_scope::Entity")]
    PermissionScope,
    #[sea_orm(entity = "super::role_permissions::Entity")]
    RolePermissions,
    #[sea_orm(entity = "super::user_permissions::Entity")]
    UserPermissions,
    #[sea_orm(entity = "super::roles::Entity")]
    Roles,
    #[sea_orm(entity = "super::users::Entity")]
    Users,
}